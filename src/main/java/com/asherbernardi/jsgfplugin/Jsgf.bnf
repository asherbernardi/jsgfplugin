{
  parserClass="com.asherbernardi.jsgfplugin.parser.JsgfBnfParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Jsgf"
  psiImplClassSuffix="Impl"
  psiPackage="com.asherbernardi.jsgfplugin.psi"
  psiImplPackage="com.asherbernardi.jsgfplugin.psi.impl"
  psiImplUtilClass="com.asherbernardi.jsgfplugin.psi.impl.JsgfPsiImplInjections"

  elementTypeHolderClass="com.asherbernardi.jsgfplugin.psi.JsgfBnfTypes"
  elementTypeClass="com.asherbernardi.jsgfplugin.psi.JsgfElementType"
  tokenTypeClass="com.asherbernardi.jsgfplugin.psi.JsgfTokenType"

  name(".*exp")=expansion
  extends(".*exp")=expansion

  tokens = [
    space = 'regexp:\s+'
    JSGF_IDENT = '#JSGF'
    VERSION = 'regexp:V\d+(\.\d+)*'
    GRAMMAR = 'grammar'
    IMPORT = 'import'
    PUBLIC = 'public'
    LPAREN = '('
    RPAREN = ')'
    LBRACE = '{'
    RBRACE = '}'
    LBRACK = '['
    RBRACK = ']'
    LANGLE = '<'
    RANGLE = '>'
    QUOTE = '"'
    OR = '|'
    PLUS = '+'
    PERIOD = '.'
    STAR = '*'
    EQUALS = '='
    SEMICOLON = ';'
    WEIGHT = 'regexp:/[0-9]/'
    SLASH = '/'
    IDENTIFIER = 'regexp:[a-zA-Z1-9]+'
    RULE_NAME_IDENTIFIER = 'regexp:[a-zA-Z1-9_]+'
  ]
}

jsgfFile ::= header_grammar_imports_rules
private header_grammar_imports_rules ::= header_grammar_imports ruleDefinition*
private header_grammar_imports ::= header_grammar importStatement* {
  pin = 1
  recoverWhile = header_grammar_imports_recover
}
private header_grammar_imports_recover ::= !(PUBLIC|LANGLE)
private header_grammar ::= header_top [grammarDeclaration] {
  pin = 1
  recoverWhile = header_grammar_recover
}
private header_grammar_recover ::= !(IMPORT|IDENTIFIER|LANGLE|PUBLIC)
private header_top ::= [header] {
  recoverWhile = header_top_recover
}
private header_top_recover ::= !(GRAMMAR|IMPORT|PUBLIC|LANGLE);

header ::= header_with_recover SEMICOLON {
  pin = 1
}
private header_with_recover ::= JSGF_IDENT VERSION IDENTIFIER* {
  pin = 1
  recoverWhile = header_recover
  mixin = "com.asherbernardi.jsgfplugin.psi.impl.HeaderMixin"
}
private header_recover ::= !(SEMICOLON)

grammarDeclaration ::= grammarDeclaration_with_recover SEMICOLON {
  pin = 1
  recoverWhile = grammarDeclaration_top_recover
  mixin = "com.asherbernardi.jsgfplugin.psi.impl.GrammarDeclarationMixin"
}
private grammarDeclaration_top_recover ::= !(IMPORT|PUBLIC|LANGLE)
private grammarDeclaration_with_recover ::= GRAMMAR grammarName {
  pin = 1
  recoverWhile = grammarDeclaration_recover
  mixin = "com.asherbernardi.jsgfplugin.psi.impl.GrammarDeclarationMixin"
}
private grammarDeclaration_recover ::= !(SEMICOLON)

grammarName ::= IDENTIFIER {
  mixin = "com.asherbernardi.jsgfplugin.psi.impl.GrammarNameMixin"
  implements = "com.asherbernardi.jsgfplugin.psi.GrammarName"
  stubClass = "com.asherbernardi.jsgfplugin.psi.stub.GrammarNameStub"
  elementTypeFactory = "com.asherbernardi.jsgfplugin.psi.stub.GrammarNameStubElementType.getInstance"
}

importStatement ::= importStatement_with_recover SEMICOLON {
  pin = 1
  recoverWhile = importStatement_loop_recover
  mixin = "com.asherbernardi.jsgfplugin.psi.impl.ImportStatementMixin"
  methods = [getRuleImportName]
}
private importStatement_loop_recover ::= !(IMPORT|PUBLIC|LANGLE)
private importStatement_with_recover ::= IMPORT ruleImport {
  pin = 1
  recoverWhile = importStatement_recover
}
private importStatement_recover ::= !(SEMICOLON|IMPORT|PUBLIC|LANGLE)

ruleImport ::= ruleImport_with_recover RANGLE {
  pin = 1
  mixin = "com.asherbernardi.jsgfplugin.psi.impl.RuleImportMixin"
}
private ruleImport_with_recover ::= LANGLE ruleImportName {
  pin = 1
  recoverWhile = ruleImport_recover
}
private ruleImport_recover ::= !(RANGLE|SEMICOLON|IMPORT|PUBLIC|LANGLE)
ruleImportName ::= RULE_NAME_IDENTIFIER (PERIOD RULE_NAME_IDENTIFIER)* [PERIOD STAR] {
  implements = "com.asherbernardi.jsgfplugin.psi.RuleName"
  mixin = "com.asherbernardi.jsgfplugin.psi.impl.RuleImportNameMixin"
  methods = [isStarImport getUnqualifiedRuleName getFullyQualifiedGrammarName
             getSimpleGrammarName getPackageName getReferencePair]
  stubClass = "com.asherbernardi.jsgfplugin.psi.stub.ImportStub"
  elementTypeFactory = "com.asherbernardi.jsgfplugin.psi.stub.ImportStubElementType.getInstance"
  recoverWhile = ruleImport_recover
}

ruleDefinition ::= ruleDefinition_with_recover SEMICOLON {
  pin = 1
  recoverWhile = ruleDefinition_loop_recover
  mixin = "com.asherbernardi.jsgfplugin.psi.impl.RuleDefinitionMixin"
  methods = [getRuleName isPublicRule]
}
private ruleDefinition_loop_recover ::= !(PUBLIC|LANGLE)
private ruleDefinition_with_recover ::= [PUBLIC] ruleDeclaration EQUALS expansion {
  pin = 3
  recoverWhile = ruleDefinition_recover
}
private ruleDefinition_recover ::= !(SEMICOLON)

ruleDeclaration ::= ruleDeclaration_with_recover RANGLE {
  pin = 1
  mixin = "com.asherbernardi.jsgfplugin.psi.impl.RuleDeclarationMixin"
}
private ruleDeclaration_with_recover ::= LANGLE ruleDeclarationName {
  pin = 1
  recoverWhile = ruleDeclaration_recover
}
private ruleDeclaration_recover ::= !(EQUALS|RANGLE|SEMICOLON|PUBLIC|LBRACE)
ruleDeclarationName ::= RULE_NAME_IDENTIFIER {
  mixin = "com.asherbernardi.jsgfplugin.psi.impl.RuleDeclarationNameMixin"
  implements = ["com.asherbernardi.jsgfplugin.psi.RuleName"]
  methods = [isPublicRule]
  stubClass = "com.asherbernardi.jsgfplugin.psi.stub.RuleDeclarationStub"
  elementTypeFactory = "com.asherbernardi.jsgfplugin.psi.stub.RuleDeclarationStubElementType.getInstance"
}

ruleReference_exp ::= ruleReference_with_recover RANGLE {
  pin = 1
  recoverWhile = ruleReference_top_recover
  mixin = "com.asherbernardi.jsgfplugin.psi.impl.RuleReferenceMixin"
  implements = "com.asherbernardi.jsgfplugin.psi.JsgfBaseExpansion"
}
private ruleReference_top_recover ::=
    &(RULE_NAME_IDENTIFIER|PERIOD|RANGLE)
private ruleReference_with_recover ::= LANGLE ruleReferenceName {
  pin = 1
  recoverWhile = ruleReference_recover
}
private ruleReference_recover ::=
    &(RULE_NAME_IDENTIFIER|PERIOD)
ruleReferenceName ::= RULE_NAME_IDENTIFIER (PERIOD RULE_NAME_IDENTIFIER)* {
  mixin = "com.asherbernardi.jsgfplugin.psi.impl.RuleReferenceNameMixin"
  implements = "com.asherbernardi.jsgfplugin.psi.RuleName"
  methods = [getReferencePair]
}

terminal_exp ::= TERMINAL_IDENTIFIER | IDENTIFIER {
  mixin = "com.asherbernardi.jsgfplugin.psi.impl.TerminalMixin"
  implements = "com.asherbernardi.jsgfplugin.psi.JsgfBaseExpansion"
}

string_exp ::= string_with_recover QUOTE {
  pin = 1
  mixin = "com.asherbernardi.jsgfplugin.psi.impl.StringMixin"
  methods = [getStringText]
  implements = "com.asherbernardi.jsgfplugin.psi.JsgfBaseExpansion"
}
private string_with_recover ::= QUOTE [STRING_TEXT] {
  pin = 1
  recoverWhile = string_recover
}
// Recover until the lexer exits the STRING state
private string_recover ::= &(STRING_TEXT)

expansion ::=
  alternatives_group
  | sequence_exp
  | unary_operation_exp
  | primary
private expansion_for_weighted_alt ::=
  sequence_exp
  | unary_operation_exp
  | primary
private expansion_for_sequence_exp ::=
  unary_operation_exp
  | primary

private alternatives_group ::= unweighted_alternatives_exp | weighted_alternatives_exp
fake alternatives_exp ::= WEIGHT? expansion (OR WEIGHT? expansion) {
  mixin = "com.asherbernardi.jsgfplugin.psi.impl.AlternativesMixin"
  methods = [getOrSymbols]
}
unweighted_alternatives_exp ::= expansion (OR expansion)+ {
  pin(".*") = 1
  extends = alternatives_exp
}
weighted_alternatives_exp ::= weighted_expansion (OR weighted_expansion)+ {
  pin(".*") = 1
  extends = alternatives_exp
}
private weighted_expansion ::= WEIGHT expansion_for_weighted_alt

sequence_exp ::= expansion expansion_for_sequence_exp+ {
  pin = 2
  mixin = "com.asherbernardi.jsgfplugin.psi.impl.SequenceMixin"
}

unary_operation_exp ::= expansion (STAR|PLUS|tag) {
  mixin = "com.asherbernardi.jsgfplugin.psi.impl.UnaryOperationMixin"
  methods = [isStar isPlus]
}

private primary ::= terminal_exp | string_exp | ruleReference_exp | group_group

private group_group ::= parentheses_group_exp | optional_group_exp
fake group_exp ::= (LPAREN|RBRACK) expansion? (RPAREN|RBRACK) {
  mixin = "com.asherbernardi.jsgfplugin.psi.impl.GroupMixin"
  methods = [isOptionalGroup]
}
parentheses_group_exp ::= LPAREN expansion RPAREN {
  extends = group_exp
}
optional_group_exp ::= LBRACK expansion RBRACK {
  extends = group_exp
}

tag ::= tag_with_recover RBRACE {
  pin = 1
  mixin = "com.asherbernardi.jsgfplugin.psi.impl.TagMixin"
}

private tag_with_recover ::= LBRACE TAG_TOKEN* {
  pin = 1
  recoverWhile = tag_recover
}
private tag_recover ::= !(RBRACE)
