/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.asherbernardi.jsgfplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.*;
import static com.asherbernardi.jsgfplugin.psi.JsgfBnfTypes.*;
import static com.asherbernardi.jsgfplugin.JsgfParserDefinition.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Jsgf.flex</tt>
 */
class JsgfLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int RULE_EXPANSION = 2;
  public static final int TAG = 4;
  public static final int JAVA_SCRIPT = 6;
  public static final int STRING = 8;
  public static final int IN_DOC_COMMENT = 10;
  public static final int IN_BLOCK_COMMENT = 12;
  public static final int RULE_NAME = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [10, 6, 5]
   * Total runtime size is 5056 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>11]<<6)|((ch>>5)&0x3f)]<<5)|(ch&0x1f)];
  }

  /* The ZZ_CMAP_Z table has 544 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\5\1\10\12\11\1\12\1\13\11\5\1\14\1\15\1"+
    "\5\1\16\1\17\11\5\1\20\14\5\1\21\2\5\1\22\u01e2\5");

  /* The ZZ_CMAP_Y table has 1216 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\2\6\53\7\1\10\3\7\1\11\6\7\1\10\14\7\1\12\3\7\1\12"+
    "\3\7\1\12\3\7\1\12\3\7\1\12\3\7\1\12\3\7\1\12\3\7\1\12\3\7\1\12\3\7\1\12\2"+
    "\7\1\11\3\7\1\11\2\7\1\10\10\7\1\10\1\7\1\11\72\7\1\10\1\11\11\7\1\12\3\7"+
    "\1\11\5\7\1\13\5\7\1\11\2\7\1\11\4\7\1\13\35\7\1\14\1\15\176\14\1\16\1\14"+
    "\12\7\1\17\13\14\4\7\4\14\111\7\1\20\106\14\120\7\61\14\1\21\24\14\1\22\1"+
    "\14\1\21\5\14\2\22\2\14\1\22\14\14\1\22\50\14\20\7\37\14\1\23\1\22\54\14\1"+
    "\21\35\14\1\24\3\14\1\22\1\14\1\25\4\14\1\22\10\14\1\22\12\14\1\22\3\14\1"+
    "\22\13\14\1\22\3\14\1\21\2\14\1\22\15\14\1\21\32\14\1\22\60\14\1\21\6\14\1"+
    "\22\143\14\1\26\1\27\12\14\1\22\65\14");

  /* The ZZ_CMAP_A table has 768 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\5\1\2\1\3\1\6\1\1\22\0\1\5\1\14\1\23\1\34\1\11\2\14\1\0\1\30\1\31"+
    "\1\10\1\22\1\14\1\13\1\12\1\7\12\17\1\14\1\24\1\62\1\25\1\63\1\0\1\14\4\11"+
    "\1\21\1\40\1\37\2\11\1\35\10\11\1\36\2\11\1\41\4\11\1\32\1\27\1\33\1\14\1"+
    "\11\1\0\1\45\1\61\1\54\1\57\1\60\1\11\1\43\1\11\1\47\2\11\1\55\1\46\1\53\1"+
    "\51\1\50\1\11\1\44\1\11\1\52\1\56\5\11\1\64\1\26\1\65\1\14\6\0\1\3\52\0\1"+
    "\14\1\0\1\15\1\16\1\0\1\14\12\0\27\14\1\0\50\14\12\20\46\14\12\20\14\14\12"+
    "\20\20\14\12\20\6\14\12\20\6\14\50\0\2\3\35\0\1\14\30\0\20\14\20\0\16\14\22"+
    "\0\12\42\46\0\12\42\45\0\1\4\6\0\12\42\46\0\12\42\16\0\62\42");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\1\4\5\1\10\1\11\2\12\1\3\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\2\1\1\1\25\1\26\2\27\1\30\1\31\1\26"+
    "\3\32\2\33\1\2\1\34\1\35\1\1\1\36\1\37"+
    "\1\40\1\41\1\0\2\42\4\5\3\12\1\24\1\43"+
    "\1\44\2\0\1\45\2\0\4\5\1\12\1\46\2\0"+
    "\4\5\1\12\1\47\4\5\2\12\1\0\1\5\1\50"+
    "\1\5\1\51\1\0\1\52\1\53\1\46";

  private static int [] zzUnpackAction() {
    int [] result = new int[104];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a"+
    "\0\u01b0\0\u01e6\0\u021c\0\u01b0\0\u0252\0\u01b0\0\u01b0\0\u0288"+
    "\0\u02be\0\u02f4\0\u032a\0\u0360\0\u01b0\0\u01b0\0\u0396\0\u03cc"+
    "\0\u0402\0\u01b0\0\u01b0\0\u01b0\0\u01b0\0\u01b0\0\u01b0\0\u01b0"+
    "\0\u01b0\0\u01b0\0\u0438\0\u046e\0\u04a4\0\u01b0\0\u04da\0\u0510"+
    "\0\u01b0\0\u01b0\0\u01b0\0\u0546\0\u01b0\0\u057c\0\u05b2\0\u05e8"+
    "\0\u01b0\0\u01b0\0\u061e\0\u01b0\0\u0654\0\u01b0\0\u01b0\0\u068a"+
    "\0\u06c0\0\u06f6\0\u072c\0\u0762\0\u0798\0\u07ce\0\u0804\0\u083a"+
    "\0\u0870\0\u08a6\0\u08dc\0\u01b0\0\u01b0\0\u01b0\0\u0654\0\u0912"+
    "\0\u01b0\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u0a56\0\u0a8c"+
    "\0\u0870\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06"+
    "\0\u01b0\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a\0\u0d80"+
    "\0\u0db6\0\u0252\0\u0dec\0\u0252\0\u0e22\0\u0252\0\u0252\0\u01b0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[104];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\3\12\1\11\2\12\1\13\1\14\3\15\3\11"+
    "\1\15\1\11\1\15\2\11\1\16\1\17\6\11\1\20"+
    "\4\15\1\21\1\11\1\22\3\15\1\23\1\24\11\15"+
    "\1\25\1\26\2\11\1\27\2\12\1\30\1\11\1\12"+
    "\1\30\1\31\1\14\11\27\1\32\1\33\1\16\1\17"+
    "\1\34\1\27\1\35\1\36\1\37\1\40\26\27\1\25"+
    "\1\26\1\41\1\42\1\43\2\12\1\44\1\11\2\12"+
    "\20\43\1\45\35\43\1\46\1\11\3\12\1\11\2\12"+
    "\57\11\1\47\1\50\1\51\1\47\1\52\16\47\1\53"+
    "\3\47\1\54\36\47\10\55\1\56\65\55\1\57\55\55"+
    "\1\11\1\60\2\61\1\11\1\62\1\61\1\63\1\14"+
    "\1\63\1\64\2\63\1\65\1\11\4\63\1\11\16\63"+
    "\1\11\17\63\1\66\1\67\2\11\67\0\3\12\1\0"+
    "\2\12\66\0\1\70\1\71\66\0\3\15\3\0\1\15"+
    "\1\0\1\15\13\0\5\15\1\0\17\15\41\0\1\72"+
    "\41\0\3\15\3\0\1\73\1\74\1\15\13\0\5\15"+
    "\1\74\17\15\15\0\3\15\3\0\1\15\1\0\1\15"+
    "\13\0\5\15\1\0\1\15\1\75\15\15\15\0\3\15"+
    "\3\0\1\15\1\0\1\15\13\0\5\15\1\0\3\15"+
    "\1\76\4\15\1\77\6\15\15\0\3\15\3\0\1\15"+
    "\1\0\1\15\13\0\5\15\1\0\13\15\1\100\3\15"+
    "\4\0\1\27\2\0\1\27\2\0\1\27\1\101\1\0"+
    "\11\27\5\0\1\27\4\0\26\27\4\0\1\27\2\12"+
    "\1\30\1\0\1\12\1\30\1\101\1\0\11\27\5\0"+
    "\1\27\4\0\26\27\4\0\1\27\2\0\1\27\2\0"+
    "\1\27\1\70\1\71\1\27\1\102\4\27\1\103\2\27"+
    "\5\0\1\27\4\0\26\27\4\0\1\43\2\0\1\43"+
    "\3\0\20\43\1\0\35\43\1\0\1\43\2\12\1\44"+
    "\1\0\2\12\20\43\1\0\35\43\30\0\1\104\35\0"+
    "\1\104\1\47\2\0\1\47\1\0\16\47\1\0\3\47"+
    "\1\54\36\47\2\0\1\51\63\0\1\47\2\0\1\47"+
    "\1\0\22\47\1\54\36\47\7\0\1\105\65\0\1\106"+
    "\60\0\1\61\72\0\1\63\1\0\1\63\1\0\2\63"+
    "\1\107\1\0\4\63\1\0\16\63\1\0\17\63\4\0"+
    "\1\110\3\0\2\110\1\0\57\110\1\70\2\0\1\70"+
    "\1\0\61\70\10\0\1\111\113\0\1\112\40\0\1\15"+
    "\1\21\1\15\3\0\1\73\1\74\1\15\13\0\5\15"+
    "\1\74\17\15\16\0\1\113\4\0\2\74\21\0\1\74"+
    "\34\0\3\15\3\0\1\15\1\0\1\15\13\0\5\15"+
    "\1\0\2\15\1\114\14\15\15\0\3\15\3\0\1\15"+
    "\1\0\1\15\13\0\5\15\1\0\5\15\1\115\11\15"+
    "\15\0\3\15\3\0\1\15\1\0\1\15\13\0\5\15"+
    "\1\0\11\15\1\116\5\15\15\0\3\15\3\0\1\15"+
    "\1\0\1\15\13\0\5\15\1\0\16\15\1\117\4\0"+
    "\1\27\2\0\1\27\2\0\1\27\2\0\11\27\5\0"+
    "\1\27\4\0\26\27\4\0\1\27\2\0\1\27\2\0"+
    "\1\27\1\101\1\0\6\27\1\120\2\27\5\0\1\27"+
    "\4\0\26\27\4\0\1\27\2\0\1\27\2\0\1\27"+
    "\1\121\1\0\1\27\1\102\4\27\1\103\2\27\5\0"+
    "\1\27\4\0\26\27\4\0\1\122\3\0\2\122\1\0"+
    "\57\122\37\0\1\123\45\0\2\74\21\0\1\74\34\0"+
    "\3\15\3\0\1\15\1\0\1\15\13\0\5\15\1\0"+
    "\3\15\1\124\13\15\15\0\3\15\3\0\1\15\1\0"+
    "\1\15\13\0\5\15\1\0\6\15\1\125\10\15\15\0"+
    "\3\15\3\0\1\15\1\0\1\15\13\0\5\15\1\0"+
    "\12\15\1\126\4\15\15\0\3\15\3\0\1\15\1\0"+
    "\1\15\13\0\5\15\1\0\12\15\1\127\4\15\4\0"+
    "\1\27\2\0\1\27\2\0\1\27\1\121\1\0\6\27"+
    "\1\120\1\27\1\130\5\0\1\27\4\0\24\27\1\130"+
    "\1\27\22\0\1\63\107\0\1\131\36\0\3\15\3\0"+
    "\1\15\1\0\1\15\13\0\5\15\1\0\3\15\1\132"+
    "\13\15\15\0\3\15\3\0\1\15\1\0\1\15\13\0"+
    "\5\15\1\0\1\15\1\133\15\15\15\0\3\15\3\0"+
    "\1\15\1\0\1\15\13\0\5\15\1\0\13\15\1\134"+
    "\3\15\15\0\3\15\3\0\1\15\1\0\1\15\13\0"+
    "\5\15\1\0\4\15\1\135\12\15\4\0\1\27\2\0"+
    "\1\27\2\0\1\27\1\101\1\0\2\27\1\136\3\27"+
    "\1\137\2\27\1\140\4\0\1\27\4\0\26\27\15\0"+
    "\3\15\3\0\1\15\1\0\1\15\13\0\5\15\1\0"+
    "\2\15\1\141\14\15\15\0\3\15\3\0\1\15\1\0"+
    "\1\15\13\0\5\15\1\0\7\15\1\142\7\15\15\0"+
    "\3\15\3\0\1\15\1\0\1\15\13\0\5\15\1\0"+
    "\14\15\1\143\2\15\15\0\3\15\3\0\1\15\1\0"+
    "\1\15\13\0\5\15\1\0\11\15\1\144\5\15\4\0"+
    "\1\27\2\0\1\27\2\0\1\27\1\101\1\0\6\27"+
    "\1\137\2\27\5\0\1\27\4\0\26\27\4\0\1\27"+
    "\2\0\1\27\2\0\1\27\1\121\1\0\6\27\1\137"+
    "\2\27\5\0\1\27\4\0\26\27\23\0\1\145\57\0"+
    "\3\15\3\0\1\15\1\0\1\15\13\0\5\15\1\0"+
    "\1\15\1\146\15\15\15\0\3\15\3\0\1\15\1\0"+
    "\1\15\13\0\5\15\1\0\15\15\1\147\1\15\13\0"+
    "\1\150\7\0\1\145\46\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3672];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\1\11\2\1\1\11\1\1\2\11\5\1\2\11"+
    "\3\1\11\11\3\1\1\11\2\1\3\11\1\1\1\11"+
    "\3\1\2\11\1\1\1\11\1\1\2\11\2\1\1\0"+
    "\11\1\3\11\2\0\1\11\2\0\6\1\2\0\5\1"+
    "\1\11\6\1\1\0\4\1\1\0\2\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[104];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private int previousState = YYINITIAL;

  public void yyHopOver(int newState) {
    previousState = yystate();
    yybegin(newState);
  }

  public void yyHopBack() {
    yybegin(previousState);
    previousState = YYINITIAL;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  JsgfLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        switch (zzLexicalState) {
            case TAG: {
              yybegin(RULE_EXPANSION); return TAG_TOKEN;
            }  // fall though
            case 105: break;
            case IN_DOC_COMMENT: {
              yyHopBack(); return DOC_COMMENT;
            }  // fall though
            case 106: break;
            case IN_BLOCK_COMMENT: {
              yyHopBack(); return BLOCK_COMMENT;
            }  // fall though
            case 107: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 44: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 45: break;
          case 3: 
            { return SLASH;
            } 
            // fall through
          case 46: break;
          case 4: 
            { return STAR;
            } 
            // fall through
          case 47: break;
          case 5: 
            { return IDENTIFIER;
            } 
            // fall through
          case 48: break;
          case 6: 
            { yybegin(YYINITIAL); return SEMICOLON;
            } 
            // fall through
          case 49: break;
          case 7: 
            { yybegin(RULE_EXPANSION); return EQUALS;
            } 
            // fall through
          case 50: break;
          case 8: 
            { yyHopOver(RULE_NAME); return LANGLE;
            } 
            // fall through
          case 51: break;
          case 9: 
            { return RANGLE;
            } 
            // fall through
          case 52: break;
          case 10: 
            { return TERMINAL_IDENTIFIER;
            } 
            // fall through
          case 53: break;
          case 11: 
            { return PLUS;
            } 
            // fall through
          case 54: break;
          case 12: 
            { yybegin(STRING); return QUOTE_OPEN;
            } 
            // fall through
          case 55: break;
          case 13: 
            { return OR;
            } 
            // fall through
          case 56: break;
          case 14: 
            { return LPAREN;
            } 
            // fall through
          case 57: break;
          case 15: 
            { return RPAREN;
            } 
            // fall through
          case 58: break;
          case 16: 
            { return LBRACK;
            } 
            // fall through
          case 59: break;
          case 17: 
            { return RBRACK;
            } 
            // fall through
          case 60: break;
          case 18: 
            { yybegin(TAG); return LBRACE;
            } 
            // fall through
          case 61: break;
          case 19: 
            { return RBRACE;
            } 
            // fall through
          case 62: break;
          case 20: 
            { return TAG_TOKEN;
            } 
            // fall through
          case 63: break;
          case 21: 
            { yybegin(RULE_EXPANSION); return RBRACE;
            } 
            // fall through
          case 64: break;
          case 22: 
            { return STRING_TEXT;
            } 
            // fall through
          case 65: break;
          case 23: 
            { yybegin(RULE_EXPANSION); return STRING_NL;
            } 
            // fall through
          case 66: break;
          case 24: 
            { yybegin(RULE_EXPANSION); return BAD_CHARACTER;
            } 
            // fall through
          case 67: break;
          case 25: 
            { yybegin(RULE_EXPANSION); return QUOTE_CLOSE;
            } 
            // fall through
          case 68: break;
          case 26: 
            { 
            } 
            // fall through
          case 69: break;
          case 27: 
            { yyHopBack(); return WHITE_SPACE;
            } 
            // fall through
          case 70: break;
          case 28: 
            { return RULE_NAME_IDENTIFIER;
            } 
            // fall through
          case 71: break;
          case 29: 
            { return PERIOD;
            } 
            // fall through
          case 72: break;
          case 30: 
            { return LANGLE;
            } 
            // fall through
          case 73: break;
          case 31: 
            { yyHopBack(); return RANGLE;
            } 
            // fall through
          case 74: break;
          case 32: 
            { return LINE_COMMENT;
            } 
            // fall through
          case 75: break;
          case 33: 
            { yyHopOver(IN_BLOCK_COMMENT);
            } 
            // fall through
          case 76: break;
          case 34: 
            { return VERSION;
            } 
            // fall through
          case 77: break;
          case 35: 
            { yyHopBack(); return DOC_COMMENT;
            } 
            // fall through
          case 78: break;
          case 36: 
            { yyHopBack(); return BLOCK_COMMENT;
            } 
            // fall through
          case 79: break;
          case 37: 
            { yyHopOver(IN_DOC_COMMENT);
            } 
            // fall through
          case 80: break;
          case 38: 
            { return WEIGHT;
            } 
            // fall through
          case 81: break;
          case 39: 
            { return JSGF_IDENT;
            } 
            // fall through
          case 82: break;
          case 40: 
            { return IMPORT;
            } 
            // fall through
          case 83: break;
          case 41: 
            { return PUBLIC;
            } 
            // fall through
          case 84: break;
          case 42: 
            { return GRAMMAR;
            } 
            // fall through
          case 85: break;
          case 43: 
            { return INCLUDE;
            } 
            // fall through
          case 86: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
